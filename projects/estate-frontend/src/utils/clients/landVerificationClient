from typing import Optional
from pydantic import BaseModel
from algokit_utils import ABIRouter, ApplicationClient
from algosdk.atomic_transaction_composer import TransactionSigner


# ---------- 1. Define input arguments ----------
class LandVerificationArgs(BaseModel):
    document_hash: Optional[str] = None
    land_token_id: Optional[int] = None
    seller: Optional[str] = None
    buyer: Optional[str] = None


# ---------- 2. Smart Contract ABI Router ----------
class LandVerificationContract(ABIRouter):
    def __init__(self):
        super().__init__()

        # Submit document hash for verification
        @self.external
        def submit_verification(*, document_hash: str) -> None:
            return self.call_method(
                "submit_verification",
                {"document_hash": document_hash}
            )

        # Retrieve the stored verified document hash
        @self.external(read_only=True)
        def get_verified_hash() -> str:
            return self.call_method("get_verified_hash")

        # Transfer land token from seller to buyer
        @self.external
        def transfer_land_token(*, land_token_id: int, seller: str, buyer: str) -> None:
            return self.call_method(
                "transfer_land_token",
                {
                    "land_token_id": land_token_id,
                    "seller": seller,
                    "buyer": buyer
                }
            )


# ---------- 3. Application Client Wrapper ----------
class LandVerificationAppClient(ApplicationClient[LandVerificationContract]):
    def __init__(
        self,
        *,
        algod_client,
        sender: str,
        signer: TransactionSigner,
        app_id: Optional[int] = None
    ):
        super().__init__(
            app_spec=LandVerificationContract().build(),
            client=algod_client,
            sender=sender,
            signer=signer,
            app_id=app_id,
        )

    # App Call Wrappers
    def submit_verification(self, document_hash: str):
        return self.call("submit_verification", document_hash=document_hash)

    def get_verified_hash(self):
        return self.call("get_verified_hash")

    def transfer_land_token(self, land_token_id: int, seller: str, buyer: str):
        return self.call(
            "transfer_land_token",
            land_token_id=land_token_id,
            seller=seller,
            buyer=buyer
        )
